(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{116:function(e,t,n){"use strict";n.r(t);var i=n(0),s=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),n("p",[e._v("开发中遇到想快速选择某二维坐标中的数据，比如本文的例子：每天的时间点选择。要求如下：")]),e._m(1),e._m(2),n("p",[e._v("此栗子由vue组件编写。")]),e._m(3),n("p",[e._v("1、首先定义一个选区组件TimeSelected.vue,组件结构分为上中下，分别为header、wrap、footer。wrap为选区组件主要区域，其又分为左右结构，分别为Y轴和表格区域，X轴由表格header定义，选择内容块由th定义，所以组件的主要结构如下：")]),e._m(4),e._m(5),n("p",[e._v("2、逻辑实现，定义组件state，选区实现，初始化数据输入及选择数据输出")]),e._m(6),n("p",[e._v("2.1、初始化数据输入")]),e._m(7),e._m(8),n("p",[e._v("2.2、state定义（组件内部记录状态）")]),e._m(9),e._m(10),n("p",[e._v("2.3、定义事件（mounted阶段定义，beforeDestroy阶段取消），pc端mousedown,mousemove,mouseup;mobile端touchstart,toucemove,touchend")]),e._m(11),e._m(12),n("p",[e._v("2.4、事件定义及实现")]),e._m(13),e._m(14),n("p",[e._v("2.5、设置选中单元格")]),e._m(15),e._m(16),n("p",[e._v("2.6、设置框选框位置")]),e._m(17),e._m(18),n("p",[e._v("3、样式美化")]),e._m(19),e._m(20),n("select-timeselected")],1)}),[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"拖拽选区组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拖拽选区组件","aria-hidden":"true"}},[this._v("#")]),this._v(" 拖拽选区组件")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("可以拖拽圈选某个范围的数据，选中的区域高亮显示")]),t("li",[this._v("当多选区域范围内全部为选中状态时，标识为反选，其余表示全选该区域")]),t("li",[this._v("支持初始化选中数据，是否可选择，行列数据自定义的等\n实现效果如图：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"/img/time.png",alt:"timeSelected"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"定义结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 定义结构")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<template>\n\x3c!-- 定义组件 --\x3e\n  <div class="time-selection">\n    \x3c!-- 组件头 --\x3e\n    <div class="time-selection--header" v-if="showHeader">\n      <slot name="timeSelection_title">\n        <h2>{{title}}</h2>\n      </slot>\n    </div>\n    \x3c!-- 组件主体 --\x3e\n    <div ref="timeSelectionWrap" class="time-selection-wrap">\n      \x3c!-- Y轴 --\x3e\n      <div class="time-selection--yaxis" ref="timeSelectionYaxis">\n        <div v-for="(row,index) in rows" :key="row.value" :class="[\'yaxis-picker\',`time-selection--yaxis_item_${index}`]" :style="yaxisItemStyl">{{row.label}}</div>\n      </div>\n      \x3c!-- Table块 --\x3e\n      <div class="time-selection--main">\n        <table class="time-selection-picker">\n          \x3c!-- X轴 --\x3e\n          <thead ref="timeSelectionPickerHeader">\n            <tr v-if="columns.length">\n              <th v-for="(col,index) in columns" :key="col.value" :class="[\'header-picker\',`time-selection-picker--header_item_${index}`]">\n                {{col.label}}\n              </th>\n            </tr>\n          </thead>\n          \x3c!-- 选区区域 --\x3e\n          <tbody ref="timeSelectionArea">\n            <tr v-for="(row,i) in rows" :key="`${row.value}-${rows[i+1].value}`" v-if="i<rows.length-1">\n              <td class="time-selection-picker--bordered" :class="{begin:enable}" v-for="(col,j) in columns" :key="col.value" :data-col="j" :data-row="i" @click="_onTimePickerClick({row:i,col:j,value:[`${row.value}-${rows[i+1].value}`,col.value]})">\n                <div :class="[\'time-picker\',`time-selection-picker--body_item_${j}`,{\'is-active\':_hasActive(i,j)}]" :style="timeItemStyl"></div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      \x3c!-- 框选层 --\x3e\n      <div class="time-selection--range" ref="timeSelectionRange"></div>\n    </div>\n    \x3c!-- 组件尾 --\x3e\n    <div class="time-selection--footer" v-if="showFooter">\n      <slot name="timeSelection_legend">\n        <h2>{{legend}}</h2>\n      </slot>\n    </div>\n  </div>\n</template>\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"逻辑实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 逻辑实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输入","aria-hidden":"true"}},[this._v("#")]),this._v(" 输入")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("props: {\n    //定义Y轴数据（label为展示，value为实际值）\n    rows: {\n      type: Array,\n      default: () =>\n        Array.from({ length: 25 }).map((_, i) => ({\n          value: `${i}:00`,\n          label: `${i.toString().padStart(2, '0')}:00`\n        }))\n    },\n    //定义X轴数据（label为展示，value为实际值）\n    columns: {\n      type: Array,\n      default: () => [\n        { value: 'Mon', label: '星期一' },\n        { value: 'Tue', label: '星期二' },\n        { value: 'Wed', label: '星期三' },\n        { value: 'Thu', label: '星期四' },\n        { value: 'Fri', label: '星期五' },\n        { value: 'Sat', label: '星期六' },\n        { value: 'Sun', label: '星期日' }\n      ]\n    },\n    //初始化选中\n    selections: {\n      type: [Array, Object],\n      default: () => []\n    },\n    //组件头标题\n    title: {\n      type: String,\n      default: 'PickerComponentTitle'\n    },\n    //组件尾标题\n    legend: {\n      type: String,\n      default: 'PickerComponentLegend'\n    },\n    //单个选项高度\n    itemHeight: {\n      type: Number,\n      default: 20\n    },\n    //是否显示组件头\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n    //是否显示组件尾\n    showFooter: {\n      type: Boolean,\n      default: true\n    },\n    //是否可编辑\n    enable: {\n      type: Boolean,\n      default: true\n    },\n    //选中数据排列\n    sortDirective: {\n      type: Number,\n      default: 1\n    }\n  }\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"内置状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置状态","aria-hidden":"true"}},[this._v("#")]),this._v(" 内置状态")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("data() {\n    return {\n      //选择开始点\n      begin: {\n        x: 0,\n        y: 0\n      },\n      //选择结束点\n      end: {\n        x: 0,\n        y: 0\n      },\n      //是否开始选择标识\n      isRangeActive: false,\n      //选中数据集合\n      datas: [],\n      //是否移动端\n      isMobile: browser.versions.mobile\n    }\n  }\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"事件注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件注册","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件注册")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("mounted() {\n    if (this.enable) {\n      if (this.isMobile) {\n        document.addEventListener('touchstart', this._onMousedown, false)\n        document.addEventListener('touchmove', this._onMousemove, false)\n        document.addEventListener('touchend', this._onMouseup, false)\n      } else {\n        document.addEventListener('mousedown', this._onMousedown, false)\n        document.addEventListener('mousemove', this._onMousemove, false)\n        document.addEventListener('mouseup', this._onMouseup, false)\n      }\n    }\n  },\n  beforeDestroy() {\n    if (this.enable) {\n      if (this.isMobile) {\n        document.removeEventListener('touchstart', this._onMousedown)\n        document.removeEventListener('touchmove', this._onMousemove)\n        document.removeEventListener('touchend', this._onMouseup)\n      } else {\n        document.removeEventListener('mousedown', this._onMousedown)\n        document.removeEventListener('mousemove', this._onMousemove)\n        document.removeEventListener('mouseup', this._onMouseup)\n      }\n    }\n  }\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"事件实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 事件实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("//判断当前节点是否在可操作选区内\n_hasInWrap(e) {\n      let _timeSelectionWrap = this.$refs.timeSelectionWrap\n      let _timeSelectionYaxis = this.$refs.timeSelectionYaxis\n      let _timeSelectionPickerHeader = this.$refs.timeSelectionPickerHeader\n      let _target = e.target\n      return (\n        this._contains(_timeSelectionWrap, _target) &&\n        !this._contains(_timeSelectionYaxis, _target) &&\n        !this._contains(_timeSelectionPickerHeader, _target)\n      )\n    }\n// 鼠标按下事件，（记录开始点--此时开始点与结束点一致，并开始绘画选区框图，_setRangePosition）\n    _onMousedown(e) {\n      if (!this.isMobile) {\n        e.preventDefault()\n      }\n      if (!this._hasInWrap(e)) {\n        return\n      }\n      this.isRangeActive = true\n      let _timeSelectionRange = this.$refs.timeSelectionRange\n      _timeSelectionRange.style.display = 'block'\n      this.begin.x = e.clientX || e.touches[0].clientX\n      this.begin.y = e.clientY || e.touches[0].clientY\n      this.end.x = e.clientX || e.touches[0].clientX\n      this.end.y = e.clientY || e.touches[0].clientY\n      this._setRangePosition(e)\n    },\n    // 鼠标移动事件，（当处于选区状态时，不断记录更新结束点及绘制框图）\n    _onMousemove(e) {\n      if (!this.isMobile) {\n        e.preventDefault()\n      }\n      if (!this.isRangeActive) {\n        return\n      }\n      if (!this._hasInWrap(e)) {\n        this._onMouseup(e)\n        return\n      }\n      this.end.x = e.clientX || e.touches[0].clientX\n      this.end.y = e.clientY || e.touches[0].clientY\n      this._setRangePosition(e)\n    },\n    // 鼠标放起事件，（记录框选数据_setSelectedItem，并关闭框选区域，重置开始及结束点）\n    _onMouseup(e) {\n      if (!this.isMobile) {\n        e.preventDefault()\n      }\n      // 结束时在范围内\n      if (this._hasInWrap(e)) {\n        this._setSelectedItem(e)\n      }\n      this.isRangeActive = false\n      let _timeSelectionRange = this.$refs.timeSelectionRange\n      _timeSelectionRange.style.display = 'none'\n      this.begin = { x: 0, y: 0 }\n      this.end = { x: 0, y: 0 }\n    },\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"选中单元格及记录数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选中单元格及记录数据","aria-hidden":"true"}},[this._v("#")]),this._v(" 选中单元格及记录数据")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 设置选中单元格数据（判断每个单元格所在区域是否在选区区域内，及单元格在选框的上下左右方向，然后判断选框区域内的单元格是否全部选中--是否具有is-active类，是：清除datas中的数据；否：新增的数据加入datas；然后由vue的数据驱动更新dom更新）\n    _setSelectedItem(e) {\n      let _timeSelectionArea = this.$refs.timeSelectionArea\n      let _tds = _timeSelectionArea.querySelectorAll('td')\n      let _filterTds = Array.from(_tds).filter(td => {\n        let _range = td.getBoundingClientRect()\n        let _x1 = _range.left\n        let _x2 = _x1 + _range.width\n        let _y1 = _range.top\n        let _y2 = _y1 + _range.height\n        let _bx1 = this.begin.x\n        let _bx2 = this.end.x\n        let _by1 = this.begin.y\n        let _by2 = this.end.y\n        if (_bx1 > _bx2) {\n          ;[_bx1, _bx2] = [_bx2, _bx1]\n        }\n        if (_by1 > _by2) {\n          ;[_by1, _by2] = [_by2, _by1]\n        }\n        if (_x2 < _bx1 || _x1 > _bx2 || _y2 < _by1 || _y1 > _by2) {\n          return false\n        }\n        return true\n      })\n      let _isAllActive = _filterTds.every(td => {\n        let _classList = td\n          .querySelector('div')\n          .getAttribute('class')\n          .split(' ')\n        return _classList.includes('is-active')\n      })\n      let _selections = [...this.datas]\n      if (_isAllActive) {\n        _filterTds.forEach(td => {\n          let _value = `${td.dataset.row}-${td.dataset.col}`\n          let _index = _selections.findIndex(s => s === _value)\n          if (_index >= 0) {\n            _selections.splice(_index, 1)\n          }\n        })\n      } else {\n        _filterTds.forEach(td => {\n          _selections.push(`${td.dataset.row}-${td.dataset.col}`)\n        })\n      }\n      this.datas = [...new Set(_selections)].sort()\n    }\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"设置选框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置选框","aria-hidden":"true"}},[this._v("#")]),this._v(" 设置选框")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 设置选框的position\n    _setRangePosition(e) {\n      let _timeSelectionRange = this.$refs.timeSelectionRange\n      let _timeSelectionArea = this.$refs.timeSelectionArea\n      let _opt = _timeSelectionArea.getBoundingClientRect()\n      let _x = e.clientX || e.touches[0].clientX\n      let _y = e.clientY || e.touches[0].clientY\n      let _left = 0\n      let _top = 0\n      if (_x < this.begin.x) {\n        _left = _x - _opt.left\n      } else {\n        _left = this.begin.x - _opt.left\n      }\n      if (_y < this.begin.y) {\n        _top = _y - _opt.top\n      } else {\n        _top = this.begin.y - _opt.top\n      }\n      // 50为yaxis边距，32为header边距\n      _timeSelectionRange.style.left = `${_left + 50}px`\n      _timeSelectionRange.style.top = `${_top + 32}px`\n      _timeSelectionRange.style.width = `${Math.abs(_x - this.begin.x)}px`\n      _timeSelectionRange.style.height = `${Math.abs(_y - this.begin.y)}px`\n    }\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"样式美化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式美化","aria-hidden":"true"}},[this._v("#")]),this._v(" 样式美化")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<style lang=\"scss\" scoped>\n@import '../style/utils/_mixins.scss';\n@import '../style/utils/_variable.scss';\n.time-selection {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  @extend %clearfix;\n  &--header,\n  &--footer {\n    text-align: center;\n    h2 {\n      color: $--color-text-regular;\n      font-size: 150%;\n      margin: 0.5em 0;\n    }\n  }\n  &--header {\n  }\n  &--footer {\n  }\n  &--range {\n    position: absolute;\n    border: 2px dashed #b2b2b2;\n    z-index: 10;\n    display: none;\n  }\n  &-wrap {\n    @extend %clearfix;\n    position: relative;\n    flex: 1 0 0;\n    .time-picker,\n    .yaxis-picker {\n      width: 100%;\n      height: 100%;\n      text-align: center;\n      color: $--color-text-regular;\n    }\n    .header-picker {\n      height: 32px;\n    }\n    .time-picker {\n      border: 1px solid #fff;\n      &.is-active {\n        background-color: $--color-success;\n      }\n    }\n  }\n  &--yaxis {\n    width: 50px;\n    float: left;\n    font-size: 12px;\n    margin-top: 21px;\n  }\n  &--main {\n    margin-left: 50px;\n  }\n  &-picker {\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    &--bordered {\n      border: 1px solid $--border-color-base;\n    }\n  }\n}\n</style>\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"demo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[this._v("#")]),this._v(" DEMO")])}],!1,null,null,null);t.default=s.exports}}]);