(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{370:function(r,a,e){"use strict";e.r(a);var t=e(0),n=Object(t.a)({},(function(){var r=this.$createElement;this._self._c;return this._m(0)}),[function(){var r=this,a=r.$createElement,e=r._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"乱序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乱序","aria-hidden":"true"}},[r._v("#")]),r._v(" 乱序")]),e("h2",{attrs:{id:"新手常用的乱序（实现不了真正的乱序）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#新手常用的乱序（实现不了真正的乱序）","aria-hidden":"true"}},[r._v("#")]),r._v(" 新手常用的乱序（实现不了真正的乱序）")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("function shuffle(arr) {\n    return arr.sort(() =>Math.random() - 0.5);\n}\n")])]),e("h2",{attrs:{id:"添加随机值进行乱序（数组遍历多次性能不好）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加随机值进行乱序（数组遍历多次性能不好）","aria-hidden":"true"}},[r._v("#")]),r._v(" 添加随机值进行乱序（数组遍历多次性能不好）")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("function shuffle(arr) {\n    let newArr = arr.map(item=>({val:item,ram:Math.random()}));\n    newArr.sort((a,b)=>a.ram-b.ram);\n    arr.splice(0,arr.length,...newArr.map(i=>i.val));\n    return arr;\n}\n")])]),e("h2",{attrs:{id:"最随机乱序（fisher–yates）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最随机乱序（fisher–yates）","aria-hidden":"true"}},[r._v("#")]),r._v(" 最随机乱序（Fisher–Yates）")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("function shuffle(arr) {\n    let m = arr.length;\n    while (m > 1){\n        let index = Math.floor(Math.random() * m--);\n        [arr[m] , arr[index]] = [arr[index] , arr[m]]\n    }\n    return arr;\n}\n\n")])]),e("h2",{attrs:{id:"乱序测试程序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#乱序测试程序","aria-hidden":"true"}},[r._v("#")]),r._v(" 乱序测试程序")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("function test_shuffle(shuffleFn) {\n  // 多次乱序数组的次数\n  let n = 100000; \n  // 乱序的数组\n  let originArr=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n  // 保存每个元素在每个位置上出现的次数\n  let table = {}\n  originArr.forEach(a=>{\n    table[a]=Array.from({length:originArr.length}).fill(0)\n  })\n  for (let i = 0; i < n; i ++) {\n      let arr = originArr.slice(0);\n      shuffleFn(arr);\n      for(let key in table){\n        table[key][arr.indexOf(key)]++\n      }\n  }\n  console.table(table);\n}\n\ntest_shuffle(shuffle)\n")])])])}],!1,null,null,null);a.default=n.exports}}]);