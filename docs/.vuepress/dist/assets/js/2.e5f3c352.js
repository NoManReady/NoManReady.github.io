(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{49:function(e,a,t){"use strict";t.r(a);var n=t(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"图片上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片上传","aria-hidden":"true"}},[e._v("#")]),e._v(" 图片上传")]),t("h2",{attrs:{id:"根据-input-获取用户选取的图片文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#根据-input-获取用户选取的图片文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 根据 input 获取用户选取的图片文件")]),t("p",[t("code",[e._v("let _file = this.$refs.input.files[0]")])]),t("h2",{attrs:{id:"将file-文件流通过-filereader-转化成-base64"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将file-文件流通过-filereader-转化成-base64","aria-hidden":"true"}},[e._v("#")]),e._v(" 将file 文件流通过 FileReader 转化成 base64")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * 文件流转base64\n * @param {file} source 图片对象\n * @param {number} quality 图片质量\n * @return {promise} promise 图片处理promise\n */\nexport const fileToBase64ByQuality = (file, quality) => {\n  let fileReader = new FileReader()\n  let type = file.type\n  return new Promise((resolve, reject) => {\n    if (window.URL || window.webkitURL) {\n      resolve(compress(URL.createObjectURL(file), quality, type))\n    } else {\n      fileReader.onload = () => {\n        resolve(compress(fileReader.result, quality, type))\n      }\n      fileReader.onerror = (e) => {\n        reject(e)\n      }\n      fileReader.readAsDataURL(file)\n    }\n  })\n}\n")])]),t("h2",{attrs:{id:"处理-base64-数据通过-canvas（todataurl）进行压缩绘制，然后输出压缩后的-base64-图片数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理-base64-数据通过-canvas（todataurl）进行压缩绘制，然后输出压缩后的-base64-图片数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 处理 base64 数据通过 canvas（toDataURL）进行压缩绘制，然后输出压缩后的 base64 图片数据")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//  图片最大宽度\nconst MAX_WIDTH = 800\n\n/**\n * base64压缩（图片-canvas互转）\n * @param {file} base64 base64图片数据\n * @param {number} quality 图片质量\n * @param {string} format 输出图片格式\n * @return {base64} data 图片处理完成后的base64\n */\nexport const compress = (base64, quality, mimeType) => {\n  let cvs = document.createElement('canvas')\n  let img = document.createElement('img')\n  img.crossOrigin = 'anonymous'\n  return new Promise((resolve, reject) => {\n    img.src = base64\n    // 图片偏移值\n    let offetX = 0\n    img.onload = () => {\n      if (img.width > MAX_WIDTH) {\n        cvs.width = MAX_WIDTH\n        cvs.height = img.height * MAX_WIDTH / img.width\n        offetX = (img.width - MAX_WIDTH) / 2\n      } else {\n        cvs.width = img.width\n        cvs.height = img.height\n      }\n      let ctx = cvs.getContext(\"2d\").drawImage(img, 0, 0, cvs.width, cvs.height)\n      let imageData = cvs.toDataURL(mimeType, quality / 100)\n      resolve(imageData)\n    }\n  })\n}\n")])]),t("h2",{attrs:{id:"base64-数据转成-blob-文件流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base64-数据转成-blob-文件流","aria-hidden":"true"}},[e._v("#")]),e._v(" base64 数据转成 blob 文件流")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**\n * base64转文件流\n * @param {base64} base64数据\n * @param {string} format格式\n * @return {file}  文件blob\n */\nexport const convertBase64UrlToBlob = (base64, mimeType) => {\n  let bytes = window.atob(base64.split(',')[1])\n  let ab = new ArrayBuffer(bytes.length)\n  let ia = new Uint8Array(ab)\n  for (let i = 0; i < bytes.length; i++) {\n    ia[i] = bytes.charCodeAt(i)\n  }\n  let _blob = new Blob([ab], { type: mimeType })\n  return _blob\n}\n")])]),t("h2",{attrs:{id:"构造-formdata-数据进行文件的上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造-formdata-数据进行文件的上传","aria-hidden":"true"}},[e._v("#")]),e._v(" 构造 FormData 数据进行文件的上传")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let formData = new window.FormData()\nformData.append('file', _blob)\n")])])])}],!1,null,null,null);a.default=r.exports}}]);